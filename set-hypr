#!/bin/bash

# HyprV4 By SolDoesTech - https://www.youtube.com/@SolDoesTech
# License..? - You may copy, edit and ditribute this script any way you like, enjoy! :)

# The follwoing will attempt to install all needed packages to run Hyprland
# This is a quick and dirty script there are some error checking
# IMPORTANT - This script is meant to run on a clean fresh Arch install on physical hardware

# Define the software that would be inbstalled 
#Need some prep work
prep_stage=(
    qt5-wayland 
    qt5ct
    qt6-wayland 
    qt6ct
    qt5-svg
    qt5-quickcontrols2
    qt5-graphicaleffects
    gtk3 
    polkit-gnome 
    pipewire 
    wireplumber 
    jq 
    wl-clipboard 
    cliphist 
    python-requests 
    pacman-contrib
)

#software for nvidia GPU only
nvidia_stage=(
    linux-headers 
    nvidia-dkms 
    nvidia-settings 
    libva 
    libva-nvidia-driver-git
)

#the main packages
install_stage=(
    kitty 
    mako 
    waybar
    swww 
    swaylock-effects 
    wofi 
    wlogout 
    xdg-desktop-portal-hyprland 
    swappy 
    grim 
    slurp 
    thunar 
    btop
    firefox
    thunderbird
    mpv
    pamixer 
    pavucontrol 
    brightnessctl 
    bluez 
    bluez-utils 
    blueman 
    network-manager-applet 
    gvfs 
    thunar-archive-plugin 
    file-roller
    starship 
    papirus-icon-theme 
    ttf-jetbrains-mono-nerd 
    noto-fonts-emoji 
    lxappearance 
    xfce4-settings
    nwg-look-bin
    sddm
)

for str in ${myArray[@]}; do
  echo $str
done

# set some colors
CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="[\e[1;37mATTENTION\e[0m]"
CWR="[\e[1;35mWARNING\e[0m]"
CAC="[\e[1;33mACTION\e[0m]"
INSTLOG="install.log"

######
# functions go here

# function that would show a progress bar to the user
show_progress() {
    while ps | grep $1 &> /dev/null;
    do
        echo -n "."
        sleep 2
    done
    echo -en "Done!\n"
    sleep 2
}

# function that will test for a package and if not found it will attempt to install it
install_software() {
    # First lets see if the package is there
    if yay -Q $1 &>> /dev/null ; then
        echo -e "$COK - $1 Já está Instalado."
    else
        # no package found so Instalando
        echo -en "$CNT - Instalando $1 ."
        yay -S --noconfirm $1 &>> $INSTLOG &
        show_progress $!
        # test to make sure package installed
        if yay -Q $1 &>> /dev/null ; then
            echo -e "\e[1A\e[K$COK - $1 Foi instalado."
        else
            # if this is hit then a package is missing, exit to review log
            echo -e "\e[1A\e[K$CER - $1 Falhou a instalação, verifique install.log"
            exit
        fi
    fi
}

# Limpar tela
clear

# Deixando o usuário ciente de que o script está prestes a ser executado
echo -e "$CNT - Este script tentará instalar o Hyprland em seu sistema."
sleep 1
echo -e "$CNT - Este script foi projetado para ser executado em uma instalação limpa do Arch Linux."
sleep 1
echo -e "$CNT - Esse script foi criado por SolDoesTech e traduzido por Ulpio."
sleep 1
echo -e "$CNT - você está prestes a executar um script que tentaria configurar o Hyprland.
Observe que o Hyprland ainda está em Beta."
sleep 1

# Tentando descobrir se o usuário está executando o script como root
echo -e "$CNT - Verificando se é um computador físico ou VM..."
ISVM=$(hostnamectl | grep Chassis)
echo -e "Usando $ISVM"
if [[ $ISVM == *"vm"* ]]; then
    echo -e "$CWR - Por favor note que as VMs não são totalmente suportadas e se você tentar executar isso em
    uma máquina virtual há uma grande chance de que isso falhe."
    sleep 1
fi

# Deixar o usuario ciente que o script usará o sudo
echo -e "$CNT - Esse script usará o sudo para executar alguns comandos.
Você será solicitado a inserir sua senha.
Se você estiver preocupado em inserir sua senha, poderá revisar o conteúdo do script."
sleep 1

# Dando a opção de sair do script
read -rep $'[\e[1;33mACTION\e[0m] - Gosta de continuar? (y,n) ' CONTINST
if [[ $CONTINST == "Y" || $CONTINST == "y" ]]; then
    echo -e "$CNT - Iniciando o script..."
    sudo touch /tmp/hyprv.tmp
else
    echo -e "$CNT - Script será encerrado, nenhuma alteração foi feita no seu sistema."
fi

# Procurando GPU Nvidia
if lspci -k | grep -A 2 -E "(VGA|3D)" | grep -iq nvidia; then
    ISNVIDIA=true
else
    ISNVIDIA=false
fi

### Desativa a economia de energia para WIFI ###
read -rep $'[\e[1;33mACTION\e[0m] - Gostaria de desativar a economia de energia para wi-fi? (y,n) ' WIFI
if [[ $WIFI == "Y" || $WIFI == "y" ]]; then
    LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
    echo -e "$CNT - O seguinte arquivo foi criado $LOC.\n"
    echo -e "[connection]\nwifi.powersave = 2" | sudo tee -a $LOC &>> $INSTLOG
    echo -en "$CNT - Reiniciando o servico NetworkManager, Por favor aguarde."
    sleep 2
    sudo systemctl restart NetworkManager &>> $INSTLOG
    
    #wait for services to restore (looking at you DNS)
    for i in {1..6} 
    do
        echo -n "."
        sleep 1
    done
    echo -en "Feito!\n"
    sleep 2
    echo -e "\e[1A\e[K$COK - Reinicialização do NetworkManager completa ."
fi

#### Check for package manager ####
if [ ! -f /sbin/yay ]; then  
    echo -en "$CNT - Configurando yay."
    git clone https://aur.archlinux.org/yay.git &>> $INSTLOG
    cd yay
    makepkg -si --noconfirm &>> ../$INSTLOG &
    show_progress $!
    if [ -f /sbin/yay ]; then
        echo -e "\e[1A\e[K$COK - yay Configurado"
        cd ..
        
        # update the yay database
        echo -en "$CNT - Atualizando yay."
        yay -Suy --noconfirm &>> $INSTLOG &
        show_progress $!
        echo -e "\e[1A\e[K$COK - yay Atualizado."
    else
        # if this is hit then a package is missing, exit to review log
        echo -e "\e[1A\e[K$CER - Intalação do yay falhou, verifique install.log"
        exit
    fi
fi



### Baixar todos os pacores ####
read -rep $'[\e[1;33mACTION\e[0m] - Gostaria de instalar os pacotes? (y,n) ' INST
if [[ $INST == "Y" || $INST == "y" ]]; then

    # Prep Stage - Bunch of needed items
    echo -e "$CNT - Estágio de preparação - Instalando componentes necessários, isso pode demorar um pouco..."
    for SOFTWR in ${prep_stage[@]}; do
        install_software $SOFTWR 
    done

    # Instalando placa Nvidia
    if [[ "$ISNVIDIA" == true ]]; then
        echo -e "$CNT - Estagio de suporte a GPU Nvidia - Instalando componentes necessários, isso pode demorar um pouco..."
        for SOFTWR in ${nvidia_stage[@]}; do
            install_software $SOFTWR
        done
    
        # update config
        sudo sed -i 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
        sudo mkinitcpio --config /etc/mkinitcpio.conf --generate /boot/initramfs-custom.img
        echo -e "options nvidia-drm modeset=1" | sudo tee -a /etc/modprobe.d/nvidia.conf &>> $INSTLOG
    fi

    # Instalando a versão correta do Hyprland
    echo -e "$CNT - Instalando Hyprland, Isso pode demorar um pouco..."
    if [[ "$ISNVIDIA" == true ]]; then
        #check for hyprland and remove it so the -nvidia package can be installed
        if yay -Q hyprland &>> /dev/null ; then
            yay -R --noconfirm hyprland &>> $INSTLOG &
        fi
        install_software hyprland-nvidia
    else
        install_software hyprland
    fi

    # Stage 1 - main components
    echo -e "$CNT - Instalando main components, Isso pode demorar um pouco..."
    for SOFTWR in ${install_stage[@]}; do
        install_software $SOFTWR 
    done

    # Start the bluetooth service
    echo -e "$CNT - Iniciando o Serviço de Bluetooth..."
    sudo systemctl enable --now bluetooth.service &>> $INSTLOG
    sleep 2

    # Enable the sddm login manager service
    echo -e "$CNT - Ativando o serviço do SDDM ..."
    sudo systemctl enable sddm &>> $INSTLOG
    sleep 2
    
    # Clean out other portals
    echo -e "$CNT - Limpando portais xdg conflitantes..." 
    yay -R --noconfirm xdg-desktop-portal-gnome xdg-desktop-portal-gtk &>> $INSTLOG
fi

### Copy Config Files ###
read -rep $'[\e[1;33mACTION\e[0m] - gostaria de copiar os arquivos de configuração? (y,n) ' CFG
if [[ $CFG == "Y" || $CFG == "y" ]]; then
    echo -e "$CNT - Copiando arquivos..."

    # copy the HyprV directory
    cp -R HyprV ~/.config/

    #set the measuring unit
    echo -e "$CNT - Tentando encontrar o sistema de medidas..."
    if locale -a | grep -q ^en_US; then
        echo -e "$COK - usando o sistema imperial..."
        ln -sf ~/.config/HyprV/waybar/conf/mesu-imp.jsonc ~/.config/HyprV/waybar/conf/mesu.jsonc
        sed -i 's/SET_MESU=""/SET_MESU="I"/' ~/.config/HyprV/hyprv.conf
    else
        echo -e "$COK - Usando o sistema métrico metric..."
        sed -i 's/SET_MESU=""/SET_MESU="M"/' ~/.config/HyprV/hyprv.conf
        ln -sf ~/.config/HyprV/waybar/conf/mesu-met.jsonc ~/.config/HyprV/waybar/conf/mesu.jsonc
    fi

    # Setup each appliaction
    # check for existing config folders and backup 
    for DIR in hypr kitty mako swaylock waybar wlogout wofi 
    do 
        DIRPATH=~/.config/$DIR
        if [ -d "$DIRPATH" ]; then 
            echo -e "$CAT - Config for $DIR located, backing up."
            mv $DIRPATH $DIRPATH-back &>> $INSTLOG
            echo -e "$COK - Backed up $DIR to $DIRPATH-back."
        fi

        # make new empty folders
        mkdir -p $DIRPATH &>> $INSTLOG
    done

    # link up the config files
    echo -e "$CNT - Instalando a nova configuração..." 
    cp ~/.config/HyprV/hypr/* ~/.config/hypr/
    ln -sf ~/.config/HyprV/kitty/kitty.conf ~/.config/kitty/kitty.conf
    ln -sf ~/.config/HyprV/mako/conf/config-dark ~/.config/mako/config
    ln -sf ~/.config/HyprV/swaylock/config ~/.config/swaylock/config
    ln -sf ~/.config/HyprV/waybar/conf/v4-config.jsonc ~/.config/waybar/config.jsonc
    ln -sf ~/.config/HyprV/waybar/style/v4-style-dark.css ~/.config/waybar/style.css
    ln -sf ~/.config/HyprV/wlogout/layout ~/.config/wlogout/layout
    ln -sf ~/.config/HyprV/wofi/config ~/.config/wofi/config
    ln -sf ~/.config/HyprV/wofi/style/v4-style-dark.css ~/.config/wofi/style.css


    # add the Nvidia env file to the config (if needed)
    if [[ "$ISNVIDIA" == true ]] then
        echo -e "\nsource = ~/.config/hypr/env_var_nvidia.conf" >> ~/.config/hypr/hyprland.conf
    fi

    # Copy the SDDM theme
    echo -e "$CNT - Instalando a tela de login."
    sudo cp -R Extras/sdt /usr/share/sddm/themes/
    sudo chown -R $USER:$USER /usr/share/sddm/themes/sdt
    sudo mkdir /etc/sddm.conf.d
    echo -e "[Theme]\nCurrent=sdt" | sudo tee -a /etc/sddm.conf.d/10-theme.conf &>> $INSTLOG
    WLDIR=/usr/share/wayland-sessions
    if [ -d "$WLDIR" ]; then
        echo -e "$COK - $WLDIR found"
    else
        echo -e "$CWR - $WLDIR NOT found, creating..."
        sudo mkdir $WLDIR
    fi 
    
    # stage the .desktop file
    sudo cp Extras/hyprland.desktop /usr/share/wayland-sessions/

    # setup the first look and feel as dark
    xfconf-query -c xsettings -p /Net/ThemeName -s "Adwaita-dark"
    xfconf-query -c xsettings -p /Net/IconThemeName -s "Papirus-Dark"
    gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark"
    gsettings set org.gnome.desktop.interface icon-theme "Papirus-Dark"
    cp -f ~/.config/HyprV/backgrounds/v4-background-dark.jpg /usr/share/sddm/themes/sdt/wallpaper.jpg
fi

### Install the starship shell ###
read -rep $'[\e[1;33mACTION\e[0m] - gostaria de ativar o shell StarShip ? (y,n) ' STAR
if [[ $STAR == "Y" || $STAR == "y" ]]; then
    # install the starship shell
    echo -e "$CNT - Hansen Crusher, Engage!"
    echo -e "$CNT - Atualizando .bashrc..."
    echo -e '\neval "$(starship init bash)"' >> ~/.bashrc
    echo -e "$CNT - copying starship config file to ~/.config ..."
    cp Extras/starship.toml ~/.config/
fi

### Install software for Asus ROG laptops ###
read -rep $'[\e[1;33mACTION\e[0m] - Para notebooks ASUS ROG - Gostaria de instalar Asus ROG software support? (y,n) ' ROG
if [[ $ROG == "Y" || $ROG == "y" ]]; then
    echo -e "$CNT - Adicionando Keys..."
    sudo pacman-key --recv-keys 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35 &>> $INSTLOG
    sudo pacman-key --finger 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35 &>> $INSTLOG
    sudo pacman-key --lsign-key 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35 &>> $INSTLOG
    sudo pacman-key --finger 8F654886F17D497FEFE3DB448B15A6B0E9A3FA35 &>> $INSTLOG

    LOC="/etc/pacman.conf"
    echo -e "$CNT - Atualizando $LOC com o repo g14."
    echo -e "\n[g14]\nServer = https://arch.asus-linux.org" | sudo tee -a $LOC &>> $INSTLOG
    echo -e "$CNT - atualize o sistema..."
    sudo pacman -Suy --noconfirm &>> $INSTLOG

    echo -e "$CNT - Instalando pacotes ROG ..."
    install_software asusctl
    install_software supergfxctl
    install_software rog-control-center

    echo -e "$CNT - Ativando servicos ROG..."
    sudo systemctl enable --now power-profiles-daemon.service &>> $INSTLOG
    sleep 2
    sudo systemctl enable --now supergfxd &>> $INSTLOG
    sleep 2

    # add the ROG keybinding file to the config
    echo -e "\nsource = ~/.config/hypr/rog-g15-strix-2021-binds.conf" >> ~/.config/hypr/hyprland.conf
fi

### Script is done ###
echo -e "$CNT - Script completo!"
if [[ "$ISNVIDIA" == true ]]; then 
    echo -e "$CAT - Desde que tentamos configurar uma GPU Nvidia, o script agora será encerrado e você deverá reiniciar.
    Digite 'reboot' no prompt e pressione Enter quando estiver pronto."
    exit
fi

read -rep $'[\e[1;33mACTION\e[0m] - Gostaria de iniciar o Hyprland agora? (y,n) ' HYP
if [[ $HYP == "Y" || $HYP == "y" ]]; then
    exec sudo systemctl start sddm &>> $INSTLOG
else
    exit
fi